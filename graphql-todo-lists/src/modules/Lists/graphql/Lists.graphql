type List @key(fields: "id") {
  id: ID!
  name: String!
}

input ListFilterQueryInput {
  partialName: String
}

input PaginationInput {
  first: Int
  after: ID
  last: Int
  before: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: ID!
  endCursor: ID!
}
type ListEdge {
  cursor: ID!
  node: List!
}
type ListConnection {
  edges: [ListEdge]!
  pageInfo: PageInfo!
}

extend type Query {
  Lists(filter: ListFilterQueryInput): [List!]!
  PagedLists(
    paginationArgs: PaginationInput!
    filter: ListFilterQueryInput
  ): ListConnection!
}

extend type Mutation {
  RemoveList(listId: ID!): String! @authorized(requires: [ADMIN])
  AddList(listName: String!): List!
    @authorized(requires: [ADMIN, REGISTERED_USER])
  ChangeListName(listId: ID!, newName: String!): List!
}
