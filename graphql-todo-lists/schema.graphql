directive @adminOnly on OBJECT | FIELD_DEFINITION

directive @authorized(requires: [Roles]) on OBJECT | FIELD_DEFINITION

directive @computed on FIELD_DEFINITION

enum Roles {
  ADMIN
  REGISTERED_USER
}

type List @key(fields: "id") {
  id: ID!
  name: String!
}

input ListFilterQueryInput {
  partialName: String
}

input PaginationInput {
  first: Int
  after: ID
  last: Int
  before: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: ID!
  endCursor: ID!
}

type ListEdge {
  cursor: ID!
  node: List!
}

type ListConnection {
  edges: [ListEdge]!
  pageInfo: PageInfo!
}

type Query {
  Lists(filter: ListFilterQueryInput): [List!]!
  PagedLists(paginationArgs: PaginationInput!, filter: ListFilterQueryInput): ListConnection!
}

type Mutation {
  RemoveList(listId: ID!): String! @authorized(requires: [ADMIN])
  AddList(listName: String!): List! @authorized(requires: [ADMIN, REGISTERED_USER])
  ChangeListName(listId: ID!, newName: String!): List!
}

directive @entity(embedded: Boolean) on OBJECT

directive @chimp(embedded: Boolean) on OBJECT

directive @column(overrideType: String) on FIELD_DEFINITION

directive @id on FIELD_DEFINITION

directive @link(overrideType: String) on FIELD_DEFINITION

directive @embedded on FIELD_DEFINITION

directive @map(path: String!) on FIELD_DEFINITION

directive @union(discriminatorField: String) on UNION

input AdditionalEntityFields {
  path: String
  type: String
}

schema {
  query: Query
  mutation: Mutation
}

